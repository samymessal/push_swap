!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(NAME)	Makefile	/^$(NAME):	$(OBJ)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME):		$(OBJS)$/;"	t
BONUS	libft/Makefile	/^BONUS			=	ft_lstnew_bonus.c ft_lstadd_front_bonus.c \\$/;"	m
BONUS_OBJS	libft/Makefile	/^BONUS_OBJS		= $(BONUS:.c=.o)$/;"	m
CC	Makefile	/^CC					=	gcc -g$/;"	m
CC	libft/Makefile	/^CC				= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS				=	-Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS			= -Wall -Wextra -Werror$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME				=	push_swap.a$/;"	m
NAME	libft/Makefile	/^NAME			= libft.a$/;"	m
OBJ	Makefile	/^OBJ					=	$(SRCS:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS			= $(SRCS:.c=.o)$/;"	m
PROG	Makefile	/^PROG				=	push_swap$/;"	m
PUSH_SWAP_H	push_swap.h	/^# define PUSH_SWAP_H$/;"	d
RM	Makefile	/^RM					=	rm -f$/;"	m
RM	libft/Makefile	/^RM				= rm -f$/;"	m
SRCS	Makefile	/^SRCS				=	push_swap.c utils.c utils2.c utils3.c movements.c \\$/;"	m
SRCS	libft/Makefile	/^SRCS			=	ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c \\$/;"	m
a_list	push_swap.h	/^typedef struct a_list$/;"	s
all	Makefile	/^all:				$(NAME)$/;"	t
all	libft/Makefile	/^all:			$(NAME)$/;"	t
bonus	libft/Makefile	/^bonus:			$(BONUS_OBJS)$/;"	t
clean	Makefile	/^clean:		$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
cost	push_swap.h	/^	int				cost;$/;"	m	struct:a_list	typeref:typename:int
fclean	Makefile	/^fclean:		clean$/;"	t
fclean	libft/Makefile	/^fclean:			clean$/;"	t
ft_all	algos2.c	/^void	ft_all(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_atoi	libft/ft_atoi.c	/^long long int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:long long int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
ft_char_rm	libft/ft_strtrim.c	/^static int	ft_char_rm(char const *s1, char const *set)$/;"	f	typeref:typename:int	file:
ft_check_num	errors.c	/^int	ft_check_num(int ac, char **av)$/;"	f	typeref:typename:int
ft_checkdup	errors.c	/^int	ft_checkdup(t_stack **a)$/;"	f	typeref:typename:int
ft_costb	utils3.c	/^void	ft_costb(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_costb_1	utils3.c	/^int	ft_costb_1(t_stack **a, t_stack **b, t_stack *temp_a, t_stack *temp_b)$/;"	f	typeref:typename:int
ft_coststack	utils3.c	/^void	ft_coststack(t_stack *temp_a, t_stack *temp_b, t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_cwords	libft/ft_split.c	/^static size_t	ft_cwords(char const *s, char c)$/;"	f	typeref:typename:size_t	file:
ft_final_b	algos2.c	/^void	ft_final_b(t_stack **a, t_stack **b, t_stack *min_a, t_stack *min_b)$/;"	f	typeref:typename:void
ft_final_push	algos2.c	/^void	ft_final_push(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_get_a	algos2.c	/^t_stack	*ft_get_a(t_stack **a, t_stack	*min)$/;"	f	typeref:typename:t_stack *
ft_get_b	algos2.c	/^t_stack	*ft_get_b(t_stack **a, t_stack **b)$/;"	f	typeref:typename:t_stack *
ft_getmax	utils.c	/^t_stack	*ft_getmax(t_stack *a)$/;"	f	typeref:typename:t_stack *
ft_getmax_suit	utils2.c	/^t_stack	*ft_getmax_suit(t_stack *a)$/;"	f	typeref:typename:t_stack *
ft_getmin	utils.c	/^t_stack	*ft_getmin(t_stack *a)$/;"	f	typeref:typename:t_stack *
ft_getmin_cost	utils2.c	/^t_stack	*ft_getmin_cost(t_stack *b)$/;"	f	typeref:typename:t_stack *
ft_ind_final	utils2.c	/^void	ft_ind_final(t_stack **a)$/;"	f	typeref:typename:void
ft_ind_push	algos.c	/^void	ft_ind_push(t_stack **a)$/;"	f	typeref:typename:void
ft_inset	libft/ft_strtrim.c	/^static int	ft_inset(char const *set, char c)$/;"	f	typeref:typename:int	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_issorted	utils2.c	/^int	ft_issorted(t_stack **a)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_longsuit	algos.c	/^void	ft_longsuit(t_stack **a)$/;"	f	typeref:typename:void
ft_lstadd_back	libft/ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdel	free.c	/^void	ft_lstdel(t_stack *lst)$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_numlen	libft/ft_itoa.c	/^static int	ft_numlen(int n)$/;"	f	typeref:typename:int	file:
ft_pa	movements.c	/^void	ft_pa(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_pb	movements.c	/^void	ft_pb(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_pushto_b	algos.c	/^void	ft_pushto_b(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_ra	movements2.c	/^void	ft_ra(t_stack **a)$/;"	f	typeref:typename:void
ft_rb	movements2.c	/^void	ft_rb(t_stack **b)$/;"	f	typeref:typename:void
ft_rr	movements2.c	/^void	ft_rr(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_rra	movements2.c	/^void	ft_rra(t_stack **a)$/;"	f	typeref:typename:void
ft_rrb	movements2.c	/^void	ft_rrb(t_stack **b)$/;"	f	typeref:typename:void
ft_rrr	movements3.c	/^void	ft_rrr(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_sa	movements.c	/^void	ft_sa(t_stack **a)$/;"	f	typeref:typename:void
ft_sb	movements.c	/^void	ft_sb(t_stack **b)$/;"	f	typeref:typename:void
ft_sort3	algos.c	/^void	ft_sort3(t_stack **a)$/;"	f	typeref:typename:void
ft_sort5	algos.c	/^void	ft_sort5(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_ss	movements.c	/^void	ft_ss(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_start_500	push_swap.c	/^void	ft_start_500(t_stack **a, t_stack **b)$/;"	f	typeref:typename:void
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *to_find, size_t n)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_sublen	libft/ft_substr.c	/^static size_t	ft_sublen(char const *str, unsigned int start, size_t len)$/;"	f	typeref:typename:size_t	file:
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_table	push_swap.c	/^t_stack	*ft_table(int ac, char **arg)$/;"	f	typeref:typename:t_stack *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_uptade_index	utils2.c	/^void	ft_uptade_index(t_stack **a)$/;"	f	typeref:typename:void
ft_wdlen	libft/ft_split.c	/^static size_t	ft_wdlen(char const *s, char c, int i)$/;"	f	typeref:typename:size_t	file:
ind_final	push_swap.h	/^	int				ind_final;$/;"	m	struct:a_list	typeref:typename:int
index	push_swap.h	/^	int				index;$/;"	m	struct:a_list	typeref:typename:int
lstaddback	utils.c	/^void	lstaddback(t_stack **list, t_stack *new)$/;"	f	typeref:typename:void
lstnew	utils.c	/^t_stack	*lstnew(int num, int index)$/;"	f	typeref:typename:t_stack *
lstsize	utils.c	/^int	lstsize(t_stack *lst)$/;"	f	typeref:typename:int
main	push_swap.c	/^int	main(int ac, char **av)$/;"	f	typeref:typename:int
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
next	push_swap.h	/^	struct a_list	*next;$/;"	m	struct:a_list	typeref:struct:a_list *
num	push_swap.h	/^	int				num;$/;"	m	struct:a_list	typeref:typename:int
push_b	push_swap.h	/^	int				push_b;$/;"	m	struct:a_list	typeref:typename:int
re	Makefile	/^re:					fclean $(NAME)$/;"	t
re	libft/Makefile	/^re:				fclean $(NAME)$/;"	t
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
suit	push_swap.h	/^	int				suit;$/;"	m	struct:a_list	typeref:typename:int
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_stack	push_swap.h	/^}				t_stack;$/;"	t	typeref:struct:a_list
